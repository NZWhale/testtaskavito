[{"/Users/vladimirputin/Desktop/projects/testforavito/src/MainPage/MainPage.tsx":"1","/Users/vladimirputin/Desktop/projects/testforavito/src/Stories/FullStory.tsx":"2","/Users/vladimirputin/Desktop/projects/testforavito/src/index.tsx":"3","/Users/vladimirputin/Desktop/projects/testforavito/src/Stories/SingleStory.tsx":"4","/Users/vladimirputin/Desktop/projects/testforavito/src/Stories/SingleComment.tsx":"5","/Users/vladimirputin/Desktop/projects/testforavito/src/store/actionCreators/setNewStoriesIds.ts":"6","/Users/vladimirputin/Desktop/projects/testforavito/src/store/reducers/reducer.ts":"7"},{"size":1231,"mtime":1607247288892,"results":"8","hashOfConfig":"9"},{"size":2932,"mtime":1606650612197,"results":"10","hashOfConfig":"9"},{"size":1462,"mtime":1607247218669,"results":"11","hashOfConfig":"9"},{"size":2549,"mtime":1607247261685,"results":"12","hashOfConfig":"9"},{"size":1517,"mtime":1606595661950,"results":"13","hashOfConfig":"9"},{"size":416,"mtime":1607245703183,"results":"14","hashOfConfig":"9"},{"size":780,"mtime":1607245713642,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"zdnrk",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/vladimirputin/Desktop/projects/testforavito/src/MainPage/MainPage.tsx",["33"],"/Users/vladimirputin/Desktop/projects/testforavito/src/Stories/FullStory.tsx",[],"/Users/vladimirputin/Desktop/projects/testforavito/src/index.tsx",["34"],"/Users/vladimirputin/Desktop/projects/testforavito/src/Stories/SingleStory.tsx",[],"/Users/vladimirputin/Desktop/projects/testforavito/src/Stories/SingleComment.tsx",["35"],"import React from \"react\";\nimport { StoryState } from \"./SingleStory\";\n\n// interface SingleCommentState {\n//     commentNumber: string;\n//     childrenCommentsNumbers: Array<string>;\n// }\n\nexport interface SingleCommentProps {\n    kid: number;\n    key: string;\n}\n\nexport class SingleComment extends React.Component<SingleCommentProps> {\n    state = {\n        isOpen: false,\n        commentNumber: this.props.kid,\n        childrenCommentsNumbers: [],\n        by: \"\",\n        id: \"\",\n        kids: [],\n        parent: \"\",\n        text: \"\",\n        time: \"\",\n        type: \"\"\n    }\n\n    getSingleComment() {\n        let comment = fetch(`https://hacker-news.firebaseio.com/v0/item/${this.state.commentNumber}.json?print=pretty`)\n            .then(response => response.json())\n            .then((data) => data)\n        return comment\n    }\n\n    componentDidMount() {\n        this.getSingleComment()\n            .then((data) => {\n                this.setState({\n                    by: data.by,\n                    id: data.id,\n                    kids: data.kids,\n                    parent: data.parent,\n                    text: data.text,\n                    time: data.time,\n                    type: data.type,\n                })\n                console.log(this.state)\n            })\n    }\n\n    render() {\n        return (\n            <>\n                <div>\n                    <h6 className=\"border-bottom\" style={{fontSize: \"12px\"}}>{this.state.text}</h6>\n                </div>\n            </>\n        )\n    }\n}","/Users/vladimirputin/Desktop/projects/testforavito/src/store/actionCreators/setNewStoriesIds.ts",["36"],"import  Action  from \"../../types\"\n\ninterface StoriesIds {\n    storiesIds: Array<string>\n}\n\nconst newStoriesIdsAction: string = \"SET_NEW_STORIES_IDS\"\n\ninterface SetNewStoriesIds {\n    type: string,\n    payload: Action<StoriesIds>\n}\n\nconst setNewStoriesIds = (value: StoriesIds ): Action<StoriesIds> => {\n    return { \n        type: newStoriesIdsAction,\n        payload: value\n    }\n}\n\nexport default setNewStoriesIds",["37","38"],"/Users/vladimirputin/Desktop/projects/testforavito/src/store/reducers/reducer.ts",[],{"ruleId":"39","severity":1,"message":"40","line":3,"column":8,"nodeType":"41","messageId":"42","endLine":3,"endColumn":13},{"ruleId":"39","severity":1,"message":"43","line":9,"column":8,"nodeType":"41","messageId":"42","endLine":9,"endColumn":21},{"ruleId":"39","severity":1,"message":"44","line":2,"column":10,"nodeType":"41","messageId":"42","endLine":2,"endColumn":20},{"ruleId":"39","severity":1,"message":"45","line":9,"column":11,"nodeType":"41","messageId":"42","endLine":9,"endColumn":27},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},"@typescript-eslint/no-unused-vars","'State' is defined but never used.","Identifier","unusedVar","'setNewStories' is defined but never used.","'StoryState' is defined but never used.","'SetNewStoriesIds' is defined but never used.","no-native-reassign",["50"],"no-negated-in-lhs",["51"],"no-global-assign","no-unsafe-negation"]